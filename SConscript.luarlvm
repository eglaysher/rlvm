# Main scons file

import shutil
import sys

Import('env')

########################################################## [ Root environment ]
test_env = env.Clone()
test_env.Append(
  CPPDEFINES = [
    "CASE_SENSITIVE_FILESYSTEM",
    "_THREAD_SAFE"
  ],
  CXXFLAGS = [
    "--ansi",
    "-std=c++11"
  ]
)

if test_env['PLATFORM'] == 'darwin':
  test_env.Append(FRAMEWORKS=["OpenGL"])
else:
  test_env.Append(LIBS=["GL"])
test_env.ParseConfig("sdl2-config --libs")
test_env.ParseConfig('pkg-config --cflags --libs libpng')

test_env.Append(CPPPATH = ["#/test"])

config = test_env.Configure()

# Building the luaRlvm test harness requires having lua installed; if we do
# have lua installed, go ahead and use it, but don't really worry if this fails
# since end users don't use this binary.
if config.CheckLibWithHeader('lua5.1', 'lua5.1/lua.h', 'cpp'):
  env['BUILD_LUA_TESTS'] = True
else:
  print "Not building luaRlvm. (Don't worry, it's only a testing tool!)"

test_env = config.Finish()

script_machine_files = [
  "test/script_machine/script_machine.cc",
  "test/script_machine/script_world.cc",
  "test/script_machine/luabind_event_system.cc",
  "test/script_machine/luabind_graphics_object.cc",
  "test/script_machine/luabind_graphics_system.cc",
  "test/script_machine/luabind_machine.cc",
  "test/script_machine/luabind_system.cc",
  "test/script_machine/luabind_utility.cc"
]

if env['BUILD_LUA_TESTS'] == True:
  test_env.Append(CPPPATH = [ "/usr/include/lua5.1" ] )

  # Build our included copy of luabind.
  test_env.BuildSubcomponent("luabind")

  test_env.RlvmProgram("lua_rlvm", ['test/lua_rlvm.cc', script_machine_files],
                       use_lib_set = ["SDL2", "LUA"],
                       rlvm_libs = ["system_sdl", "rlvm"])
  test_env.Install('$OUTPUT_DIR', 'lua_rlvm')
